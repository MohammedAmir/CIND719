import org.apache.log4j.Logger
import org.apache.log4j.Level

import sqlContext.implicits._
import org.apache.spark.sql.types._
import org.apache.spark.sql.functions._
import org.apache.spark.sql._

//test and train data split
import org.apache.spark.mllib.feature.PCA
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.{LabeledPoint, LinearRegressionWithSGD}

///// feature transformation
import org.apache.spark.ml.feature._
import org.apache.spark.ml.classification._
import org.apache.spark.ml.evaluation._

Logger.getLogger("org").setLevel(Level.OFF)
Logger.getLogger("akka").setLevel(Level.OFF)

--------
// Connect to the database
sqlContext.sql("use titanic")
val t = sqlContext.table("titanic_train")
t.show(10)

--------
// transform gender to numeric index
val g_ind = new StringIndexer().setInputCol("gender").setOutputCol("gender_ind").fit(t)
val tg_ind = g_ind.transform(t)
tg_ind.show(10)

------------

// transform port of embarkation to numeric index
val e_ind = new StringIndexer().setInputCol("embarked").setOutputCol("embarked_ind").fit(tg_ind)
val te_ind = e_ind.transform(tg_ind)
te_ind.show(10)

------------
// Define features array
val features = Array("pclass", "age", "sibsp", "parch",  "fare", "embarked_ind", "gender_ind")

// fill in null values as 0
val t_imp = te_ind.na.fill(0)

// put all the features into one vector called "features"
val t_vec = new VectorAssembler().setInputCols(features).setOutputCol("features").transform(t_imp)
t_vec.show(10)

---------------
/// Modeling

// train the model using training data
val model = (new LogisticRegression()).setLabelCol("survived").fit(t_vec)

// score the model 
val predictions = model.transform(t_vec)

// show some predicted results
predictions.select($"passengerid", $"gender",$"fare", $"survived",  $"prediction", $"features", $"probability")

// calculate accuracy
val accuracy = predictions.filter($"survived" === $"prediction").count.toDouble/t.count

// evaluation metrics
val evaluator = new BinaryClassificationEvaluator().setLabelCol("survived").setMetricName("areaUnderROC")
val auc = evaluator.evaluate(predictions)

-------------
////1.	Using the model built in class for titanic dataset, calculate the accuracy of our model for passengers who survived and those didn't survive separately, i.e., accuracy for both possible outcomes. (True positive & True Negative Testing)
// show accuracy for Label Class Zero - Not Survived
var a = predictions.select($"passengerid", $"survived", $"prediction").where($"survived" === 0 && $"prediction" === 0 ).count.toDouble
var b = predictions.select($"passengerid", $"survived", $"prediction").where($"survived" === 0).count.toDouble
var class_zero_accuracy = a/b

// show accuracy for Label Class One - Survived
var d = predictions.select($"passengerid", $"survived", $"prediction").where($"survived" === 1 && $"prediction" === 1 ).count.toDouble
var c = predictions.select($"passengerid", $"survived", $"prediction").where($"survived" === 1).count.toDouble
var class_zero_accuracy = d/c

------------------
// scale fare between 0 and 10
def fun(x:Double) : Double = x / 512
predictions.withColumn("newfare", fun($"fare"))

------------
// separate gender into IsMale and IsFemale
// isMale Function
val ismale = udf((gender: Double) => 
{
  if (gender == 0) 1
  else 0
})


// isFemale Function
val isfemale = udf((gender: Double) => 
{
  if (gender == 1) 1
  else 0
})

val df2 = predictions.withColumn("IsMale", ismale($"gender_ind"))
val df3 = df2.withColumn("IsFemale", isfemale($"gender_ind"))
var df4 = df3.select($"passengerid",$"pclass",$"age",$"sibsp",$"parch",$"ticket",$"cabin",$"fare",$"IsMale",$"IsFemale",$"embarked_ind", $"survived")
df4.show(5)

--------------
//DEFINE A NEW FEATURE
// Define new features array
//val features = Array("pclass", "age" , "sibsp", "parch",  "fare", "IsMale","IsFemale","embarked_ind")
val features = Array( "age" , "IsMale","IsFemale","embarked_ind")

// put all the features into one vector called "features"
val t_newvec = new VectorAssembler().setInputCols(features).setOutputCol("features").transform(df4)
//t_newvec.show(10)

/// Modeling  ---- train the model using new updated dataset
val model = (new LogisticRegression()).setLabelCol("survived").fit(t_newvec)

// score the model 
val newpredictions = model.transform(t_newvec)

// show some predicted results
newpredictions.select($"passengerid",  $"IsMale",$"IsFemale", $"survived",  $"prediction", $"features", $"probability")

// calculate accuracy
val newaccuracy = newpredictions.filter($"survived" === $"prediction").count.toDouble/t.count

// evaluation metrics
val newevaluator = new BinaryClassificationEvaluator().setLabelCol("survived").setMetricName("areaUnderROC")
val auc = newevaluator.evaluate(predictions)

-------------------
//5.	We built and scored our model on the same data (t_vec) which is not ideal. Split the dataset to use 70% of data for training and 30% for scoring. Calculate the accuracy on your test/scored data. 
// split data between training and test 
 val splits = t_newvec.randomSplit(Array(0.8, 0.2), seed = 11L)
 val train = splits(0).cache()
 val test = splits(1)

// Modelling using training and testing data
val trn_model = (new LogisticRegression()).setLabelCol("survived").fit(train)
val test_model = (new LogisticRegression()).setLabelCol("survived").fit(test)

// score the model 
val trn_predictions = trn_model.transform(train).count
val test_predictions = test_model.transform(test).count

/// Modeling  ---- training data the model using training data
val model = (new LogisticRegression()).setLabelCol("survived").fit(train)
val trainpredictions = model.transform(train)
trainpredictions.select($"passengerid",  $"IsMale",$"IsFemale", $"survived",  $"prediction", $"features", $"probability").show(5)
val trainaccuracy = trainpredictions.filter($"survived" === $"prediction").count.toDouble/t.count

/// Modeling  ---- testing data the model using training data
val model = (new LogisticRegression()).setLabelCol("survived").fit(test)
val testpredictions = model.transform(test)
testpredictions.select($"passengerid",  $"IsMale",$"IsFemale", $"survived",  $"prediction", $"features", $"probability").show(5)
val testaccuracy = testpredictions.filter($"survived" === $"prediction").count.toDouble/t.count
